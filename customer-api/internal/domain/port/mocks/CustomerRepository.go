// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fiap-postech-soat1-group21/customer-api/customer-api/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// CreateCustomer provides a mock function with given fields: ctx, c
func (_m *CustomerRepository) CreateCustomer(ctx context.Context, c *entity.Customer) (*entity.Customer, error) {
	ret := _m.Called(ctx, c)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customer) (*entity.Customer, error)); ok {
		return rf(ctx, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customer) *entity.Customer); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Customer) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCustomer provides a mock function with given fields: ctx, c
func (_m *CustomerRepository) RetrieveCustomer(ctx context.Context, c *entity.Customer) (*entity.Customer, error) {
	ret := _m.Called(ctx, c)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customer) (*entity.Customer, error)); ok {
		return rf(ctx, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customer) *entity.Customer); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Customer) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
